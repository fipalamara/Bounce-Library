{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh13440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Translating Code into English \
\
1. Java\
//One ball bouncing inside a rectangular box//\
\
Public Class BouncingBallSimple is initialized and extends JPanel\{\
	//Creating dimensions for box (this way the ball can bounce in a confined setting)\
	private integer BOX_WIDTH is created and set to 640\
	private integer BOX_HEIGHT is created and set to 480 \
	\
	//Ball properties are created \
	ballRadius is set to 200 \
\
	//Center of ball X and Y coordinate \
	ballX is set to ballRadius + 50 \
	ballY is set to ballRadius + 20 \
	\
	//Ball\'92s speed for X and Y coordinates \
	ballSpeedX is set to 3 \
	ballSpeedY is set to 2 \
\
//Number of refresh per seconds \
UPDATE_RATE is set to 30 \
\
//Constructor to create the User Interface components and initial game objects \
	public BouncingBallSimple()\{\
		// New dimension is created to initiate the box\'92s preferred size (using integers 		// BOX_WIDTH and BOX_HEIGHT)\
		this.setPreferredSize(new Dimension(BOX_WIDTH, BOX_HEIGHT))\
\
		//Start the ball bouncing in it\'92s own thread\
		//object gameThread is initialized as a (new) type of Thread\
		Thread gameThread = new Thread() \{\
			public void run ()  \{ // Run instructions to make ball bounce\
				while (true) \{ // Execute one update step \
				// Calculate the ball\'92s new position \
				ballX is set to add ballSpeedX to itself \
				ballY is set to add ballSpeedY to itself \
				// Check if the ball moves over the bounds \
				// If so, adjust the position and speed. \
				if (ballX - ballRadius < 0) \{\
					ballSpeedX = -ballSpeedX; // Reflect along normal \
					ballX = ballRadius; // Re-position the ball at the edge\
				\} else if (ballX + ballRadius > BOX_WIDTH) \{\
					ballSpeedX = -ballSpeedX;\
					ballX = BOX_WIDTH - ballRadius;\
				\} \
				// May cross both x and y bounds \
				if (ballY - ballRadius < 0)  \{\
					ballSpeedY = -ballSpeedY;\
					ballY = ballRadius;\
				\} else if (ballY + ballRadius > BOX_HEIGHT)  \{ \
					ballSpeedY = -ballSpeedY; \
					ballY = BOX_HEIGHT - ballRadius;\
				\}\
				// Refresh the display \
				repaint( ); // Callback paintComponent () \
				// Delay for timing control and give other threads a chance \
				try \{\
				     Thread.sleep(1000 / UPDATE_RATE); // milliseconds\
				\}   catch (InterruptException ex)   \{  \}\
			    \}\
		      \} ;\
		       gameThread.start( ) ; // Callback run ( )\
		\}     }